#!/bin/bash

PROG_NAME="$(basename "$0")"

KEEP_ALL="all"

DEFAULT_CACHE_DIR="/var/cache/$PROG_NAME"
DEFAULT_WORK_DIR="./.$PROG_NAME"
DEFAULT_RESTIC_CMD=restic
DEFAULT_BASE_NAME=backup
DEFAULT_KEEP="$KEEP_ALL"

function usage() {
	cat << EOF
$PROG_NAME - Use restic to backup BTRFS snapshots created by btrbk

Usage:

    $PROG_NAME [<options>] <snapshot-dir> [<snapshot-dir> [...]]
        - Backup snapshots under each <snapshot-dir>

    $PROG_NAME --help
        - Display this message and exit

Options:

    -h, --help        Display this message and exit.

    -w, --work-dir    Set the working for creating temporary snapshots.
                      This must be on the same BTRFS volume as the
                      snapshots being backed up. Defaults to
                      '$DEFAULT_WORK_DIR'.

    -c, --cache-dir   Restic cache directory.
                      Defaults to '$DEFAULT_CACHE_DIR'.

    -b, --base-name   Base directory name to prefix all snapshot being
                      backed up. This cannot be an empty string.
                      Defaults to the name of the current working
                      directory, or '$DEFAULT_BASE_NAME' if the current
                      working directory is '/'.

    -r, --restic-cmd  The command to execute restic. Defaults to
                      '$DEFAULT_RESTIC_CMD'.

    -k, --keep        Policy describing when to delete snapshots.
                      Possible arguments:

                      $KEEP_ALL  Never delete snapshots

                      <a>-<b>    If one or more snapshot directories
                                 has at least <b> snapshots, delete
                                 backups for all directories, keeping
                                 the latest <a> of each.

                      Defaults to '$DEFAULT_KEEP'.

    -d, --dry-run     Print commands instead of executing them.

    -v, --verbose     Be verbose.
    
EOF
}

function exit_err() {
	err=$?
	echo "Error: $1" >&2
	usage
	exit $err
}

OPTS=$(getopt -o hw:c:b:r:k:dv -l help,work-dir:,cache-dir:,base-name:,restic-cmd:,keep:,dry-run,verbose -n "$PROG_NAME" -- "$@") \
	|| exit_err "Failed to parse command line options."

eval set -- "$OPTS"

WORK_DIR="$DEFAULT_WORK_DIR"
CACHE_DIR="$DEFAULT_CACHE_DIR"
BASE_NAME="$(basename "$(pwd)")"
[[ "$BASE_NAME" = "/" ]] && BASE_NAME="$DEFAULT_BASE_NAME"
RESTIC_CMD="$DEFAULT_RESTIC_CMD"
KEEP="$DEFAULT_KEEP"
VERBOSE=""
DRY_RUN=""

while true; do
	case "$1" in
		-h | --help )        usage; exit 0;;
		-w | --work-dir )    WORK_DIR="$2"; shift;;
		-c | --cache-dir )   CACHE_DIR="$2"; shift;;
		-b | --base-name )   BASE_NAME="$2"; shift;;
		-r | --restic-cmd )  RESTIC_CMD="$2"; shift;;
		-k | --keep )        KEEP="$2"; shift;;
		-d | --dry-run )     DRY_RUN="echo";;
		-v | --verbose )     VERBOSE=-v;;
		-- )                 shift; break;;
		* )                  break;;
	esac
	shift
done

[ ! -z "$BASE_NAME" ] && [[ "$BASE_NAME" != *"/"* ]] \
	|| exit_err "Invalid base name: '$BASE_NAME'"

KEEP_MIN=""
KEEP_MAX=""
if [ "$KEEP" != "$KEEP_ALL" ]; then
	KEEP_PATTERN='^([0-9]+)-([0-9]+)$'
	[[ "$KEEP" =~ $KEEP_PATTERN ]] || exit_err "Invalid keep specification: $KEEP"
	KEEP_MIN="${BASH_REMATCH[1]}"
	KEEP_MAX="${BASH_REMATCH[2]}"
fi

SNAPSHOT_DIRS="$@"

[ ! -z "$SNAPSHOT_DIRS" ] || exit_err "No snapshot dirs specified"

MOUNT_POINT=""
CURRENT_SNAPSHOT=""

function cleanup() {
	[ -n "$CURRENT_SNAPSHOT" ] && [ -d "$CURRENT_SNAPSHOT" ] && btrfs subvolume delete "$CURRENT_SNAPSHOT"
	[ -n "$MOUNT_POINT" ] && umount $VERBOSE "$MOUNT_POINT"
}
$DRY_RUN trap cleanup EXIT

# Handles the exit code of calls to restic
#
# If restic receives a SIGINT, it performs cleanup operations then esits with code 130.
# Bash doesn't recognise this as having being killed by a signal, so continues running.
# Calling this function with the exit code from restic should fix that.
function restic_exit() {
	[ $1 -eq 130 ] && kill -s INT $$ || exit $1
}

if [ -z "$DRY_RUN" ]; then
	if ! exec 100>"$WORK_DIR/lockfile"; then
		echo "Failed to obtain descriptor for lock file" >&2
		exit 1
	fi
	if ! flock -n 100; then
		echo "Lock already held. Presumably another restic process is running" >&2
		exit 2
	fi
fi

# Snapshot Filename Regex
#
# Thie has x groups:
#   1. Name of subvolume on which snapshot is based
#   2. Year
#   3. Month of year
#   4. Day of month
#   5. Hour of day
#   6. Minute of hour
#   7. (Optional) index within minute
SNAPSHOT_PATTERN='^(.*)\.([0-9]{4})([0-9]{2})([0-9]{2})T([0-9]{2})([0-9]{2})(_[0-9]+)?$'

BACKUP_PATTERN='^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}$'

$DRY_RUN mkdir $VERBOSE -p "$CACHE_DIR" "/$BASE_NAME" "$WORK_DIR" \
	&& $DRY_RUN mount $VERBOSE --bind "$WORK_DIR" "/$BASE_NAME" || exit $?
MOUNT_POINT="/$BASE_NAME"

CURRENT_BACKUPS="$("$RESTIC_CMD" snapshots --last --host $(hostname) || restic_exit $?)"
echo "Current backups: "
echo "$CURRENT_BACKUPS"

for snapshot_dir in "${SNAPSHOT_DIRS[@]}"; do

	[[ -d "$snapshot_dir" ]] || exit_err "$snapshot_dir is not a directory."

	$DRY_RUN mkdir $VERBOSE -p "$WORK_DIR/$snapshot_dir" || exit $?
	
	for subvol in $(ls $snapshot_dir | grep -E "$SNAPSHOT_PATTERN" | sed -E "s/$SNAPSHOT_PATTERN/\\1/" | uniq); do

		snapshots=($(ls -d $snapshot_dir/$subvol*))
		latest=${snapshots[$((${#snapshots[@]}-1))]}
	
		[[ "$latest" =~ $SNAPSHOT_PATTERN ]] \
			|| exit_err "Failed to parse snapshot timestamp for $LATEST"

		timestamp="${BASH_REMATCH[2]}-${BASH_REMATCH[3]}-${BASH_REMATCH[4]} ${BASH_REMATCH[5]}:${BASH_REMATCH[6]}:00"
		echo "Latest snapshot for $host/$subvol: $timestamp"

		latest_backup="$(echo "$CURRENT_BACKUPS" | grep -F "/$BASE_NAME/$snapshot_dir/$subvol" | cut -c 11-29)"

		[ ! -z "$latest_backup" ] && [[ ! "$latest_backup" =~ $BACKUP_PATTERN ]] \
			&& exit_err "Failed to parse latest backup timestamp for $host/$subvol: $latest_backup"
		
		echo "Latest backup for $host/$subvol: $latest_backup"

		if [ "$timestamp" \> "$latest_backup" ]; then
			
			CURRENT_SNAPSHOT="$WORK_DIR/$snapshot_dir/$subvol"
			$DRY_RUN btrfs subvolume snapshot "$latest" "$CURRENT_SNAPSHOT" \
				|| exit $?

			$DRY_RUN "$RESTIC_CMD" backup \
				--one-file-system \
				--cache-dir "$CACHE_DIR" \
				--time "$timestamp" \
				$VERBOSE \
				"/$BASE_NAME/$snapshot_dir/$subvol" \
				|| restic_exit $?
			
			$DRY_RUN btrfs subvolume delete "$CURRENT_SNAPSHOT" \
				|| exit $?
			CURRENT_SNAPSHOT=""
		fi
	done
done

ALL_BACKUPS="$("$RESTIC_CMD" snapshots --host $(hostname) || restic_exit $?)"
echo "Backups now in repository: "
echo "$ALL_BACKUPS"

[ "$KEEP" == "$KEEP_ALL" ] && exit 0

max_snapshots=0

for snapshot_dir in "${SNAPSHOT_DIRS[@]}"; do
	snapshots="$(echo "$ALL_BACKUPS" | grep -F "/$BASE_NAME/$snapshot_dir/$subvol" | wc -l)"
	if [ "$snapshots" -gt "$max_snapshots" ]; then
		max_snapshots="$snapshots"
	fi
done

if [ "$max_snapshots" -gt "$KEEP_MAX" ]; then
	dry_run=""
	[ -z "$DRY_RUN" ] || dry_run="--dry-run"
	"$RESTIC_CMD" forget \
		--keep-last $KEEP_MIN \
		--prune \
		$dry_run
fi

